package idl;


/**
* idl/_PoliceStationStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ./policestation.idl
* Tuesday, November 19, 2013 11:10:35 AM EST
*/

public class _PoliceStationStub extends org.omg.CORBA.portable.ObjectImpl implements idl.PoliceStation
{


  /**
  	 * When a police officer invokes this method from his/her station through a
  	 * client program called OfficerClient, the server associated with this
  	 * officer (determined by the BadgeID prefix) attempts to create a
  	 * CriminalRecord with the information passed, assigns a unique RecordID and
  	 * inserts the Record at the appropriate location in the hash table. The
  	 * server returns information to the officer whether the operation was
  	 * successful or not and both the server and the officer store this
  	 * information in their logs.
  	 */
  public boolean createCRecord (String firstName, String lastName, String description, String status, String badgeID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createCRecord", true);
                $out.write_string (firstName);
                $out.write_string (lastName);
                $out.write_string (description);
                $out.write_string (status);
                $out.write_string (badgeID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createCRecord (firstName, lastName, description, status, badgeID        );
            } finally {
                _releaseReply ($in);
            }
  } // createCRecord


  /**
  	 * When a police officer invokes this method from a OfficerClient, the
  	 * server associated with this officer (determined by the BadgeID prefix)
  	 * attempts to create a MissingRecord with the information passed, assigns a
  	 * unique RecordID and inserts the Record at the appropriate location in the
  	 * hash table. The server returns information to the officer whether the
  	 * operation was successful or not and both the server and the officer store
  	 * this information in their logs.
  	 */
  public boolean createMRecord (String firstName, String lastName, String address, long lastDate, String lastLocation, String status, String badgeID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("createMRecord", true);
                $out.write_string (firstName);
                $out.write_string (lastName);
                $out.write_string (address);
                $out.write_longlong (lastDate);
                $out.write_string (lastLocation);
                $out.write_string (status);
                $out.write_string (badgeID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return createMRecord (firstName, lastName, address, lastDate, lastLocation, status, badgeID        );
            } finally {
                _releaseReply ($in);
            }
  } // createMRecord


  /**
  	 * A police officer invokes this method from his/her OfficerClient and the
  	 * server associated with that officer concurrently finds out the number of
  	 * records (both CR and MR) in the other stations using UDP/IP sockets and
  	 * returns the result to the officer. Please note that it only returns the
  	 * record counts (a number) and not the records themselves. For example if
  	 * SPVM has 6 records, SPL has 7 and SPB had 8, it should return the
  	 * following: SPVM 6, SPL 7, SPB 8.
  	 */
  public String getRecordCounts (String recType)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getRecordCounts", true);
                $out.write_string (recType);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getRecordCounts (recType        );
            } finally {
                _releaseReply ($in);
            }
  } // getRecordCounts


  /**
  	 * When invoked by an officer, the server associated with this officer
  	 * (determined by the BadgeID) searches in the hash table to find the
  	 * recordID and changes the status of the record according to the newStatus
  	 * if it is found. Upon success or failure it returns a message to the
  	 * officer and the logs are updated with this information. If the status
  	 * does not match the RecordType, it is invalid. For example, if the found
  	 * Record is a CriminalRecord and the newStatus is for a MissingRecord, the
  	 * server shall return an error.
  	 */
  public String editCRecord (String lastName, String recordID, String newStatus, String badgeID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("editCRecord", true);
                $out.write_string (lastName);
                $out.write_string (recordID);
                $out.write_string (newStatus);
                $out.write_string (badgeID);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return editCRecord (lastName, recordID, newStatus, badgeID        );
            } finally {
                _releaseReply ($in);
            }
  } // editCRecord


  /**
  	* When a police officer invokes this method from his/her station, the server associated
  	* with this officer (determined by the badgeID prefix) searches its hash table to find if
  	* the record with recordID exists. If it exists, the entire record is transferred to the
  	* remoteStationServer. Note that the record should be removed from the hash table of
  	* the initial server and should be added to the hash table of the remoteStationServer
  	* atomically. The server informs the officer whether the operation was successful or
  	* not and both the server and the officer store this information in their logs.
  	*/
  public boolean transferRecord (String recordID, String remoteStationServerName, String badgeID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("transferRecord", true);
                $out.write_string (recordID);
                $out.write_string (remoteStationServerName);
                $out.write_string (badgeID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return transferRecord (recordID, remoteStationServerName, badgeID        );
            } finally {
                _releaseReply ($in);
            }
  } // transferRecord

  public String getIDs (String lastname)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getIDs", true);
                $out.write_string (lastname);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getIDs (lastname        );
            } finally {
                _releaseReply ($in);
            }
  } // getIDs

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:idl/PoliceStation:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _PoliceStationStub
