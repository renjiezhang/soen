module idl {
	interface PoliceStation{
	/**
	 * When a police officer invokes this method from his/her station through a
	 * client program called OfficerClient, the server associated with this
	 * officer (determined by the BadgeID prefix) attempts to create a
	 * CriminalRecord with the information passed, assigns a unique RecordID and
	 * inserts the Record at the appropriate location in the hash table. The
	 * server returns information to the officer whether the operation was
	 * successful or not and both the server and the officer store this
	 * information in their logs.
	 */ 
		 boolean createCRecord(in string firstName, in string lastName,
			in string description, in string status, in string badgeID);
			/**
	 * When a police officer invokes this method from a OfficerClient, the
	 * server associated with this officer (determined by the BadgeID prefix)
	 * attempts to create a MissingRecord with the information passed, assigns a
	 * unique RecordID and inserts the Record at the appropriate location in the
	 * hash table. The server returns information to the officer whether the
	 * operation was successful or not and both the server and the officer store
	 * this information in their logs.
	 */
	boolean createMRecord(in string firstName, in string lastName,
			in string address, in long long lastDate, in string lastLocation,
			in string status, in string badgeID);

	/**
	 * A police officer invokes this method from his/her OfficerClient and the
	 * server associated with that officer concurrently finds out the number of
	 * records (both CR and MR) in the other stations using UDP/IP sockets and
	 * returns the result to the officer. Please note that it only returns the
	 * record counts (a number) and not the records themselves. For example if
	 * SPVM has 6 records, SPL has 7 and SPB had 8, it should return the
	 * following: SPVM 6, SPL 7, SPB 8.
	 */
	string getRecordCounts(in string  recType); // !!!--by udb

	/**
	 * When invoked by an officer, the server associated with this officer
	 * (determined by the BadgeID) searches in the hash table to find the
	 * recordID and changes the status of the record according to the newStatus
	 * if it is found. Upon success or failure it returns a message to the
	 * officer and the logs are updated with this information. If the status
	 * does not match the RecordType, it is invalid. For example, if the found
	 * Record is a CriminalRecord and the newStatus is for a MissingRecord, the
	 * server shall return an error.
	 */
	string editCRecord(in string lastName, in string recordID, in string newStatus, in string badgeID);
			
	/**
	* When a police officer invokes this method from his/her station, the server associated
	* with this officer (determined by the badgeID prefix) searches its hash table to find if
	* the record with recordID exists. If it exists, the entire record is transferred to the
	* remoteStationServer. Note that the record should be removed from the hash table of
	* the initial server and should be added to the hash table of the remoteStationServer
	* atomically. The server informs the officer whether the operation was successful or
	* not and both the server and the officer store this information in their logs.
	*/
	boolean transferRecord (in string recordID, in string remoteStationServerName, in string badgeID);
	string getIDs(in string lastname);
	};


};
